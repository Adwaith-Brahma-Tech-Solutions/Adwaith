@page "/allprojectemployees/create"
@inject DatabaseContext DB
@inject NavigationManager NavigationManager
@attribute [Authorize]



<div class="w-1/2 ml-auto mr-auto p-10 h-full bg-neutral-400 rounded-lg justify-center items-center content-center align-center">
<h4 class="flex justify-center text-3xl font-bold text-gray-">Assign employee to project</h4>

<div class="row flex justify-center mt-16">
    <div class="col-md-4">
        <EditForm method="post" Model="ProjectEmployees" OnValidSubmit="AddProjectEmployees" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />
            <div class="mb-3 ">
                <label for="projectid" class="form-label text-2xl font-bold mr-12">Project:</label>
                <InputSelect id="projectid" @bind-Value="ProjectEmployees.ProjectId" class="p-2 rounded-md bg-cyan-200 text-xl  dropdown-item-text form-select">
                    <option value="" selected="selected">Select a project</option>
                    @foreach (var project in projects)
                    {
                        <option value="@project.Id">@project.ProjectName</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => ProjectEmployees.ProjectId" class="text-danger" />
            </div>

            <div class="mb-3 flex justify-center">
                <label for="employeeid" class="form-label  text-2xl font-bold mr-6">Employee:</label>
                    <InputSelect id="employeeid" @bind-Value="ProjectEmployees.EmployeeId" class="p-2 rounded-md bg-cyan-200 text-xl  dropdown-item-text form-select">
                    <option value="" selected="selected">Select an employee</option>
                    @foreach (var employee in employees)
                    {
                        <option value="@employee.Id">@employee.EmployeeName</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => ProjectEmployees.EmployeeId"/>
            </div>
            <button type="submit" class="btn btn-primary flex justify-center">Create</button>
        </EditForm>
    </div>
</div>

<div class="flex ml-16 text-xl font-bold mt-4">
    <a href="/allprojectemployees">Back to List</a>
</div>
</div>
@code {

    [SupplyParameterFromForm]
    public ProjectEmployees ProjectEmployees { get; set; } = new();
    List<Project> projects = new List<Project>();
    List<Employee> employees = new List<Employee>();


    protected override void OnInitialized()
    {
        projects = DB.Projects.Where(x => x.IsRemoved == false).ToList();
        employees = DB.Employees.Where(x => x.IsRemoved == false).ToList();
    }

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddProjectEmployees()
    {
        ProjectEmployees.UpdatedAt = DateTime.UtcNow;

      

        DB.ProjectEmployees.Add(ProjectEmployees);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/allprojectemployees");
    }
}

