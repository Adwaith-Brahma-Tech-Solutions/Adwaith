@page "/projectemployees/{projectId:int}"

@using Microsoft.AspNetCore.Authorization

@inject DatabaseContext DB
@using Microsoft.EntityFrameworkCore
@using Adwaith.Application.Models

@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]
@attribute [Authorize]


<h4>Employee List - @project.ProjectName</h4>




@if(!isOpen)
{
    <p>
        <button @onclick="OpenEmployeeList">Add employee</button>
    </p>
}


@if(isExists)
{
    <h3>Employee has already been allocated to this project</h3>
}

@if(isOpen)
{
    <div class="row">
        <div class="col-md-3">
            <EditForm method="post" Model="pemployee" OnValidSubmit="AddProjectEmployee" FormName="create" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary class="text-danger" />
                <div class="mb-3">
                    <label for="employeeid" class="form-label">Employee:</label>
                    <InputSelect id="employeeid" @bind-Value="pemployee.EmployeeId" class="dropdown-item-text form-select" DisplayName="Select Employee">
                        
                        <option selected="selected">Select an employee</option>
                        @foreach (var employee in employees)
                        {
                            <option value="@employee.Id">@employee.EmployeeName</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => pemployee.EmployeeId" />
                </div>
                <button type="submit" class="btn btn-primary">Add</button>
            </EditForm>
        </div>
    </div>
}

<QuickGrid Class="table" Items="projectEmployees">
    <TemplateColumn Title="S.No.">
        @(index++)
    </TemplateColumn>
    <PropertyColumn Property="projectemployees => projectemployees.Employees.EmployeeName" />


    <TemplateColumn Context="projectEmployees">
        <a href="@($"projectemployees/delete?id={projectEmployees}&projectId={project.Id}")">Delete</a>
    </TemplateColumn>
</QuickGrid>
<a href="@($"clientprojects/{clientId}")">Back to List</a>

@code{
    [Parameter]
    public int projectId { get; set; }
    bool isOpen = false;
    public Adwaith.Application.Models.ProjectEmployees pemployee = new Adwaith.Application.Models.ProjectEmployees();
    public int index = 1;

    public IQueryable<Adwaith.Application.Models.ProjectEmployees> projectEmployees;
    Adwaith.Application.Models.Project project = new Adwaith.Application.Models.Project();
    List<Employee> employees = new List<Employee>();
    public int clientId = 0;
    bool isExists = false;

    protected override void OnInitialized()
    {
        try
        {
            clientId = DB.Projects.Include(x => x.Clients).FirstOrDefault(x => x.Id == projectId).ClientId;
            isOpen = false;
            employees = DB.Employees.Where(x => x.IsRemoved == false)
                            .ToList();

            var addedEmployeesIds = DB.ProjectEmployees.Where(x => x.IsRemoved == false)
                                    .Where(x => x.ProjectId == project.Id).Select(x => x.EmployeeId).ToList();

            employees = employees.Where(x => !addedEmployeesIds.Contains(x.Id)).ToList();

            pemployee = new Adwaith.Application.Models.ProjectEmployees();
            getProjectEmployees();

            project = DB.Projects.SingleOrDefault(x => x.Id == projectId);
        }
        catch(Exception e)
        {
            string message = e.Message;
        }

    }

    void OpenEmployeeList()
    {
        isOpen = true;
        index = 1;
        StateHasChanged();
    }

    public async Task AddProjectEmployee()
    {
        try
        {
            isExists = DB.ProjectEmployees.Where(x => x.IsRemoved == false)
                        .Where(x => x.ProjectId == projectId)
                        .Any(x => x.EmployeeId == pemployee.EmployeeId);

            if (isExists)
            {
                StateHasChanged();
            }
            else
            {
                pemployee.ProjectId = projectId;
                pemployee.UpdatedAt = DateTime.UtcNow;
    

                DB.ProjectEmployees.Add(pemployee);
                await DB.SaveChangesAsync();
                getProjectEmployees();
                isOpen = false;
                StateHasChanged();
                pemployee = new Adwaith.Application.Models.ProjectEmployees();
            }

        }
        catch(Exception e)
        {
            string message = e.Message;
        }

        index = 1;
    }


    void getProjectEmployees()
    {
        try
        {
            projectEmployees = DB.ProjectEmployees.Include(x => x.Projects)
                            .Include(x => x.Employees)
                            .Where(x => x.ProjectId == projectId)
                            .Where(x => x.IsRemoved == false)
                            .ToList().AsQueryable();
        }
        catch(Exception e)
        {
            string message = e.Message;
        }

        index = 1;
    }

}

