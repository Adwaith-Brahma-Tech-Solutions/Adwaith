@page "/clients/details"
@inject DatabaseContext DB
@using Microsoft.AspNetCore.Authorization

@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@attribute [Authorize]

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Client</h4>
    <hr />
    @if (client is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@client.Name</dd>
            <dt class="col-sm-2">Address</dt>
            <dd class="col-sm-10">@client.Address</dd>
            <dt class="col-sm-2">ContactName</dt>
            <dd class="col-sm-10">@client.ContactName</dd>
            <dt class="col-sm-2">ContactNumber</dt>
            <dd class="col-sm-10">@client.ContactNumber</dd>
            <dt class="col-sm-2">EmailId</dt>
            <dd class="col-sm-10">@client.EmailId</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@client.UpdatedBy</dd>
            <dt class="col-sm-2">UpdatedAt</dt>
            <dd class="col-sm-10">@client.UpdatedAt</dd>
            <dt class="col-sm-2">IsRemoved</dt>
            <dd class="col-sm-10">@client.IsRemoved</dd>
        </dl>
        <div>
            <a href="@($"/clients/edit?id={client.Id}")">Edit</a> |
            <a href="@($"/clients")">Back to List</a>
        </div>
    }
</div>

@code {
    Client? client;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        client = await DB.Clients.FirstOrDefaultAsync(m => m.Id == Id);

        if (client is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
