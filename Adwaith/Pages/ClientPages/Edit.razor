@page "/Clients/edit"
@inject DatabaseContext DB
@using Microsoft.AspNetCore.Authorization
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

@attribute [Authorize]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Client</h4>
<hr />
@if (Client is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Client" OnValidSubmit="UpdateClient" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Client.Id" value="@Client.Id" />
                <div class="mb-3">
                    <label for="name" class="form-label">Name:</label>
                    <InputText id="name" @bind-Value="Client.Name" class="form-control" />
                    <ValidationMessage For="() => Client.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Address:</label>
                    <InputText id="address" @bind-Value="Client.Address" class="form-control" />
                    <ValidationMessage For="() => Client.Address" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="contactname" class="form-label">ContactName:</label>
                    <InputText id="contactname" @bind-Value="Client.ContactName" class="form-control" />
                    <ValidationMessage For="() => Client.ContactName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="contactnumber" class="form-label">ContactNumber:</label>
                    <InputText id="contactnumber" @bind-Value="Client.ContactNumber" class="form-control" />
                    <ValidationMessage For="() => Client.ContactNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="emailid" class="form-label">EmailId:</label>
                    <InputText id="emailid" @bind-Value="Client.EmailId" class="form-control" />
                    <ValidationMessage For="() => Client.EmailId" class="text-danger" />
                </div>
                
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/clients">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Client? Client { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Client ??= await DB.Clients.FirstOrDefaultAsync(m => m.Id == Id);

        if (Client is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateClient()
    {
       
        Client.UpdatedAt = DateTime.Now;
        DB.Attach(Client!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ClientExists(Client!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/clients");
    }

    bool ClientExists(int id)
    {
        return DB.Clients.Any(e => e.Id == id);
    }
}
