@page "/Projects/edit"
@inject DatabaseContext DB
@using Adwaith1.Application.Models
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

@* <PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Project</h4>
<hr />
@if (Project is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Project" OnValidSubmit="UpdateProject" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Project.Id" value="@Project.Id" />
                <div class="mb-3">
                    <label for="projectname" class="form-label">ProjectName:</label>
                    <InputText id="projectname" @bind-Value="Project.ProjectName" class="form-control" />
                    <ValidationMessage For="() => Project.ProjectName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="startdate" class="form-label">StartDate:</label>
                    <InputDate id="startdate" @bind-Value="Project.StartDate" class="form-control" />
                    <ValidationMessage For="() => Project.StartDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="clientid" class="form-label">ClientId:</label>
                    <InputNumber id="clientid" @bind-Value="Project.ClientId" class="form-control" />
                    <ValidationMessage For="() => Project.ClientId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Project.Description" class="form-control" />
                    <ValidationMessage For="() => Project.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Project.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Project.UpdatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedat" class="form-label">UpdatedAt:</label>
                    <InputDate id="updatedat" @bind-Value="Project.UpdatedAt" class="form-control" />
                    <ValidationMessage For="() => Project.UpdatedAt" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isremoved" class="form-label">IsRemoved:</label>
                    <InputCheckbox id="isremoved" @bind-Value="Project.IsRemoved" class="form-check-input" />
                    <ValidationMessage For="() => Project.IsRemoved" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/projects">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Project? Project { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Project ??= await DB.Projects.FirstOrDefaultAsync(m => m.Id == Id);

        if (Project is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateProject()
    {
        DB.Attach(Project!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!ProjectExists(Project!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/projects");
    }

    bool ProjectExists(int id)
    {
        return DB.Projects.Any(e => e.Id == id);
    }
}
 *@