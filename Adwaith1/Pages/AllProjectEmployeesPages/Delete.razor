@page "/allprojectemployees/delete"
@inject DatabaseContext DB

@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

@attribute [Authorize]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>ProjectEmployees</h4>
    <hr />
    @if (projectemployees is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ProjectId</dt>
            <dd class="col-sm-10">@projectemployees.ProjectId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EmployeeId</dt>
            <dd class="col-sm-10">@projectemployees.EmployeeId</dd>
        </dl>
        
        <EditForm method="post" Model="projectemployees" OnValidSubmit="DeleteProjectEmployees" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(projectemployees is null)">Delete</button> |
            <a href="/allprojectemployees">Back to List</a>
        </EditForm>
    }
</div>

@code {
    ProjectEmployees? projectemployees;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        projectemployees = await DB.ProjectEmployees.FirstOrDefaultAsync(m => m.Id == Id);

        if (projectemployees is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    public async Task DeleteProjectEmployees()
    {
        


        projectemployees.UpdatedAt = DateTime.Now;
        projectemployees.IsRemoved = true;

        DB.ProjectEmployees.Update(projectemployees!);
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/allprojectemployees");
    }
}